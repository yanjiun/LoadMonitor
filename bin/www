#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('loadmonitor:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server and Socket
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
* Handle socket connection
*/

var os      = require('os');

io.on("connection", handleClient);
function handleClient(socket){
    
    //on an interval send the contents of 
    //uptime 
    setInterval(function(){
        
        var upseconds = os.uptime();
        var loadAvg = os.loadavg()[0]; //the 1 min load avg
        var data = {
            "uptime": upseconds,
            "loadAvg": loadAvg
        };
        socket.emit('load', data);
    
    },1000); 

    var seriesData = [];
    setInterval(function(){ 
        console.log("seriesData is now" + seriesData); 
        var loadAvg = os.loadavg()[0];
        if (seriesData.length >= 60){
            seriesData.pop();
        }
        seriesData.unshift(loadAvg); 
        var data = {
            "series": seriesData,
            "newPt": loadAvg
        };
        
        socket.emit('loadHistory', data);
    
    }, 10000);

    var alertOn = false;
    
    //when load exceeds a certain 
    setInterval(function(){
        var threshold = 1;
        var loadAvg = os.loadavg()[0]; //the 1 min load avg        
        var today = new Date();
        var nowtimeString = today.toLocaleTimeString();         
        var data = {
            "warning": "High load generated an alert - load = "
                        + loadAvg + ", triggered at " + nowtimeString,
            
        };
        if (loadAvg > threshold && !alertOn){
            socket.emit('warning', data);
            alertOn = true;
        }
        var recoverData = {
            "msg": "System recovered - load = " + loadAvg +
                    " at " + nowtimeString,
        };
        if (alertOn & loadAvg < threshold){
            console.log("recover alert sent", recoverData); 
            socket.emit('recovered', recoverData);
            alertOn = false;
        } 
    }, 100);    

    socket.on('disconnect', function(){
        console.log('user disconnected');
    });
};

